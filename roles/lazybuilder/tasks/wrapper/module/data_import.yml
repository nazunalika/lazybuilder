---
# Module vars and data import
- name: "Setup the {{ mock_builder }} module directories"
  ansible.builtin.file:
    path: '{{ item }}'
    owner: '{{ mock_builder }}'
    group: '{{ mock_builder }}'
    mode: '0755'
    state: directory
  loop:
    - "/home/{{ mock_builder }}/module"
  tags:
    - module

################################################################################
# Module tracking data
- name: "Module tracker data - file data"
  block:
    - name: "Check for the module tracker file"
      ansible.builtin.stat:
        path: "{{ repo_path }}/module-results/tracker.yaml"
      register: module_tracker_check
      changed_when: "1 != 1"
      tags:
        - module

    - name: "Import increment tracker"
      ansible.builtin.include_vars:
        file: "{{ repo_path }}/module-results/tracker.yaml"
      when: module_tracker_check.stat.exists
      tags:
        - module

    - name: "Increment the tracker"
      ansible.builtin.set_fact:
        module_dist_increment_track: "{{ '%03d' % (module_dist_increment_track|int + 1) }}"
      when: module_tracker_check.stat.exists
      tags:
        - module

    # This should only happen if the module tracker doesn't exist, we'll create
    # it later.
    - name: "Setting increment to 000 as a starting point"
      ansible.builtin.set_fact:
        module_dist_increment_track: "000"
      when: not module_tracker_check.stat.exists
      tags:
        - module
  when:
    - module_tracker == 'file'
  rescue:
    - name: We failed, display the error
      ansible.builtin.debug:
        msg: "We failed to set the fact for some reason."

    - name: Fail when there's an error in the block
      ansible.builtin.fail:
        msg: "Exiting entire play"

- name: "Module tracker data - database"
  when:
    - module_tracker == 'db'
  block:
    - name: debug
      ansible.builtin.debug:
        msg: "Not available yet."

    - name: "End play"
      ansible.builtin.meta: end_play
# End
################################################################################

# Import the module yaml from somewhere? Could be file or git+file
# module_yaml_location: http|git
# Set module_data_location regardless of which mode (?)
################################################################################
# Module data import
- name: "Module Info - git mode"
  block:
    # Assert that our required vars are set
    - name: "Verify that our required vars are set"
      ansible.builtin.assert:
        that:
          - module_git_repo is defined
          - module_git_branch is defined
        success_msg: "git repo is set"
        fail_msg: "git repo is not set"
      tags:
        - module

    # checkout the git repo with the module data
    - name: "Check out the module git repo"
      ansible.builtin.git:
        repo: "{{ module_git_repo }}"
        dest: "{{ mock_builder_source_dir }}/module/{{ source_name }}"
        version: "{{ module_git_branch }}"
      register: module_git_info
      tags:
        - module

    # If modules have defaults, checkout git repo
    - name: "Check out the defaults git repo if needed"
      ansible.builtin.git:
        repo: "{{ module_defaults_git_repo }}"
        dest: "{{ mock_builder_source_dir }}/module/defaults"
        version: "{{ module_defaults_git_branch }}"
      register: module_defaults_git_info
      when:
        - module_defaults_git_repo is defined
        - module_defaults_git_branch is defined
      tags:
        - module

    - name: "Check that the yaml exists for a module"
      ansible.builtin.stat:
        path: "{{ mock_builder_source_dir }}/module/{{ source_name }}/{{ source_name }}.yaml"
      register: module_data_yaml
      check_mode: false
      changed_when: "1 != 1"
      tags:
        - module

    - name: "Check that a default yaml exists for a module"
      ansible.builtin.stat:
        path: "{{ mock_builder_source_dir }}/module/defaults/{{ source_name }}.yaml"
      register: module_data_defaults_yaml
      check_mode: false
      changed_when: "1 != 1"
      when:
        - module_defaults_git_repo is defined
        - module_defaults_git_branch is defined
      tags:
        - module

    - name: "Verify that the yaml exists for a module"
      ansible.builtin.assert:
        that:
          - module_data_yaml.stat.exists
        fail_msg: "{{ source_name }}.yaml does NOT exist in this repo"
        success_msg: "{{ source_name }}.yaml was found"
      tags:
        - module

    # import the yaml associated
    - name: "Importing module vars from file"
      ansible.builtin.include_vars:
        file: "{{ mock_builder_source_dir }}/module/{{ source_name }}/{{ source_name }}.yaml"
        name: module_data
      tags:
        - module

    # import the default yaml associated if available
    - name: "Importing default module vars from file"
      ansible.builtin.include_vars:
        file: "{{ mock_builder_source_dir }}/module/defaults/{{ source_name }}.yaml"
        name: module_default_data
      when:
        - module_defaults_git_repo is defined
        - module_defaults_git_branch is defined
        - module_data_defaults_yaml.stat.exists
      tags:
        - module

    # generate the filter list if it exists
    - name: "Generate the RPM filter list"
      ansible.builtin.set_fact:
        module_filtered_rpms: "{{ module_filtered_rpms|default([]) + [item ~ '*'] }}"
      loop: "{{ module_data.data.filter.rpms }}"
      when: module_data.data.filter.rpms is defined

  when:
    - module_yaml_location_type == 'git'
    - module_data is not defined

- name: "Module Info - http mode"
  when:
    - module_yaml_location_type == 'http'
  block:
    - name: Debug
      ansible.builtin.debug:
        msg: "Not supported."

    - name: "End play"
      ansible.builtin.meta: end_play

- name: "Check for v3"
  when:
    - module_data.version == 3
  block:
    - name: "Message for v3"
      ansible.builtin.debug:
        msg: "Play will end if module version is v3 - This is not supported yet"

    - name: "End play"
      ansible.builtin.meta: end_play

# generate necessary vars
# the contexts in MBS land are an odd combination of different things. The
# module context itself is a combination of a runtime and a build context.
# it's unclear where the runtime context comes from. there also appears to
# be "xmd" related calls, but since we're not using mbs + koji directly,
# it'll always be empty and basically unused. so instead, we're coming up
# with a different method of generating contexts for now to get around it.
# it's not ideal, but it's just one way of doing it until I can figure out
# what's actually going on to a fuller extent. As a result, between minor
# releases, it's highly likely that the module_context will be the same for
# some time. On the flipside, the dist_hash should (in theory) always be
# different.
#
# Note that if you need a module to be built for another architecture, but
# you want to keep the current timestamp (recommended), set module_version
# in your playbook.
#
# TODO: Allow contexts or hashes to be manually defined in playbooks
# generate fake xmd data
- name: "Generating initial fake (and limited) xmd data"
  ansible.builtin.include_vars:
    file: "module/module_data_xmd.yml"
  tags:
    - module

- name: "Generate necessary vars"
  ansible.builtin.include_vars:
    file: "module/module_data_init.yml"
  tags:
    - module

- name: "Stretch out contexts and filters"
  ansible.builtin.include_vars:
    file: "module/module_data_contexts.yml"
  when:
    - module_context is not defined
    - module_dist_hash is not defined
  tags:
    - module

- name: "Create wildcarded filter list"
  ansible.builtin.set_fact:
    module_interim_filter: "{% for x in module_data.data.filter.rpms %}{{ x }}* {% endfor %}"
  when: module_data.data.filter is defined
  tags:
    - module

- name: "Create interim filter list"
  ansible.builtin.set_fact:
    module_filtered_rpms: "{{ module_interim_filter.split() }}"
  when: module_data.data.filter is defined
  tags:
    - module

# import vars/module/main.yml to fulfill other pieces
- name: "Importing final required vars"
  ansible.builtin.include_vars:
    file: "module/main.yml"
  tags:
    - module
# End
################################################################################
...
