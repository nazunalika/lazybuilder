---
- name: Pull down source rpm - git mode
  block:
    - name: Verify that at most git_url is set
      assert:
        that:
          - git_url is defined
          - '"http" in git_url'
        fail_msg: "git_url is NOT defined, failing out"
        success_msg: "git_url is defined, continuing..."

    # TODO - Put in the splitter for the git url and make facts
    - name: Clone the repository
      git:
        repo: "{{ git_url }}"
        dest: "{{ mock_builder_source_dir }}/{{ source_package_name }}"
        version: "{{ git_commit_hash }}"
      tags:
        - mock
        - git_pull

    - name: Ensure SPECS directory exists regardless of repo type
      file:
        path: "{{ mock_builder_source_dir }}/{{ source_package_name }}/SPECS"
        state: directory
        mode: '0755'
      tags:
        - git_pull
        - metadata

    - name: Ensure SOURCES directory exists regardless of repo type
      file:
        path: "{{ mock_builder_source_dir }}/{{ source_package_name }}/SOURCES"
        state: directory
        mode: '0755'
      tags:
        - git_pull
        - metadata

    - name: Check for metadata file
      stat:
        path: "{{ mock_builder_source_dir }}/{{ source_package_name }}/.{{ source_package_name }}.metadata"
      register: metadata_check
      check_mode: false
      changed_when: "1 != 1"
      tags:
        - mock
        - git_pull

    - name: Check for sources file
      stat:
        path: "{{ mock_builder_source_dir }}/{{ source_package_name }}/sources"
      register: source_metadata_check
      check_mode: false
      changed_when: "1 != 1"
      tags:
        - mock
        - git_pull

    - name: Verify that git_source_url is defined when metadata is non-zero
      assert:
        that:
          - git_source_url is defined
        success_msg: "Source URL is defined"
        fail_msg: "!! Source URL is not defined. Good bye."
      when: (metadata_check.stat.exists and metadata_check.stat.size > 0)
            or (source_metadata_check.stat.exists and source_metadata_check.stat.size > 0)

    ############################################################################
    # This runs if a .metadata file was found and has a size > 0
    # Format is expected to be "SUM  SOURCES/name", which is the output of any
    # *sum command. It is also expected the sources here are from sha256sum as
    # we do not have a way of detecting the sums just yet. This might require
    # something custom.
    - name: .metadata based lookup and pull
      block:
        - name: Lookup the metadata file
          set_fact:
            metadata_ls: "{{ lookup('file', '{{ mock_builder_source_dir }}/{{ source_package_name }}/.{{ source_package_name }}.metadata') }}"
          tags:
            - git_pull
            - metadata

        - name: Generate dictionary for the metadata
          set_fact:
            metadata_ds: "{{ metadata_ds|default({}) | combine({item.split()[0]: {'length': 'sum_length_' + item.split()[0]|length|string, 'name': item.split()[1]}}) }}"
          with_items:
            - "{{ metadata_ls.strip().split('\n') }}"
          tags:
            - git_pull
            - metadata

        - name: Pull down sources
          get_url:
            url: "{{ git_source_url }}/{{ item.key }}"
            dest: "{{ mock_builder_source_dir }}/{{ source_package_name }}/{{ item.value.name }}"
            checksum: "{{ sum_lengths[item.value.length] }}:{{ item.key }}"
          loop: "{{ metadata_ds | dict2items }}"
          tags:
            - git_pull
            - metadata

      when:
        - "git_use_metadata|bool"
        - git_source_url is defined
        - metadata_check.stat.exists
        - metadata_check.stat.size > 0
      tags:
        - git_pull
        - metadata
    # end
    ############################################################################

    ############################################################################
    # This runs if a sources file was found and has a size > 0
    # Format is expected to be "type (name) = SUM" - we are able to also take
    # the type of sum and use it for the get_url checksum verification
    # something custom.
    - name: sources based lookup and pull
      block:
        - name: Lookup the metadata file
          set_fact:
            metadata_ls: "{{ lookup('file', '{{ mock_builder_source_dir }}/{{ source_package_name }}/sources') }}"
          when:
            - git_source_url is defined
          tags:
            - git_pull
            - metadata

        - name: Generate dictionary for the metadata
          set_fact:
            metadata_ds: "{{ metadata_ds|default({}) | combine({item.split()[3]: {'sum': item.split()[0], 'name': item.split()[1]}}) }}"
          with_items:
            - "{{ metadata_ls.strip().split('\n') }}"
          tags:
            - git_pull
            - metadata

        - name: Pull down sources
          get_url:
            url: "{{ git_source_url }}/{{ item.key }}"
            dest: "{{ mock_builder_source_dir }}/{{ source_package_name }}/SOURCES/{{ item.value.name | regex_replace('\\((.*)\\)','\\1') }}"
            checksum: "{{ item.value.sum | lower }}:{{ item.key }}"
          loop: "{{ metadata_ds | dict2items }}"
          tags:
            - git_pull
            - metadata

        - name: Move all files to their correct locations
          shell:
            cmd: |
              shopt -s extglob
              mv !(*.spec) SOURCES/
              mv *.spec SPECS/
            chdir: "{{ mock_builder_source_dir }}/{{ source_package_name }}"
            executable: "/bin/bash"
          changed_when: "1 != 1"
          check_mode: false
          register: git_pull_source_ret
          failed_when: "git_pull_source_ret != 0"

      when:
        - "git_use_metadata|bool"
        - git_source_url is defined
        - source_metadata_check.stat.exists
        - source_metadata_check.stat.size > 0
      tags:
        - git_pull
        - metadata
    # end
    ############################################################################
    - name: Notify user of possible playbook end
      debug:
        msg:
          - "!! Warning !!"
          - "This role will exit if:"
          - "  * git_use_metadata is true"
          - "  * metadata or sources file was not found"
          - "  * SPECS/SOURCES directories are missing"

    - name: Verifying SPECS directory
      stat:
        path: "{{ mock_builder_source_dir }}/{{ source_package_name }}/SPECS"
      register: git_specs_dir
      check_mode: false
      changed_when: "1 != 1"
      tags:
        - mock
        - git_pull

    - name: Verifying SOURCES directory
      stat:
        path: "{{ mock_builder_source_dir }}/{{ source_package_name }}/SOURCES"
      register: git_sources_dir
      check_mode: false
      changed_when: "1 != 1"
      tags:
        - mock
        - git_pull

    - name: Exit if metadata was not found, we don't consider it an rpm repo
      fail:
        msg: "Metadata nor sources file were found. Failed."
      when:
        - "git_use_metadata|bool"
        - not metadata_check.stat.exists
        - not source_metadata_check.stat.exists
      tags:
        - git_pull
        - metadata

    - name: Exit if SPECS/SOURCES were not found, it is not properly set up
      fail:
        msg: "SPECS or SOURCES directory were not found or are not directories. Failed."
      when:
        - (not git_specs_dir.stat.exists) or (not git_sources_dir.stat.exists)
        - (not git_specs_dir.stat.isdir) or (not git_sources_dir.stat.isdir)

    - name: Get spec name
      find:
        paths: "{{ mock_builder_source_dir }}/{{ source_package_name }}"
        patterns: "*{{ source_package_name }}*.spec"
        recurse: true
      register: srpm_find

    - name: Set spec filename
      set_fact:
        srpm_spec: "{{ srpm_find['files'][0]['path'].split('/')[-1] }}"

    - name: Copy the relevant sources into rpmbuild
      ansible.posix.synchronize:
        src: "{{ mock_builder_source_dir }}/{{ source_package_name }}/"
        dest: "{{ mock_builder_rpmbuild_dir }}"
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.{{ source_package_name }}.metadata"
      tags:
        - git_pull
        - metadata

    - name: Clean up the git clone
      file:
        path: "{{ mock_builder_source_dir }}/{{ source_package_name }}"
        state: absent
      tags:
        - git_pull

    - name: "Use mock to build srpm"
      when: not mock_force_classic_rpmbuild|bool
      include_tasks: "srpmbuild_mock.yml"

    - name: "Use rpmbuild to build srpm"
      when: mock_force_classic_rpmbuild|bool
      include_tasks: "srpmbuild_rpmbuild.yml"

  rescue:
    - name: We failed, display the error.
      debug:
        msg: "Failed to pull git repo or metadata: {{ ansible_failed_result }}"

    - name: Perform full cleanup
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - '{{ mock_builder_source_dir }}/{{ source_package_name }}'
        - '{{ mock_builder_rpmbuild_dir }}'
        - '{{ mock_builder_module_dir }}'
      when:
        - enable_cleanup|bool

    - name: System is no longer in use
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - "/var/tmp/.build_in_progress"

    - name: Fail when there's an error in the block
      fail:
        msg: "Exiting entire play"

  when:
    - "source_mode == 'git'"
  tags:
    - mock
    - git_pull

- name: Pull down source rpm - srpm mode
  block:
    - name: Check that srpm_url is a web URL
      assert:
        that:
          - '("http:" in srpm_url or "https:" in srpm_url)'
          - '".rpm" in srpm_url'
        fail_msg: "srpm_url does not appear to be a URL, is file://, or is NOT an .rpm"
        success_msg: "it's a web link, continuing..."
      tags:
        - srpm_pull

    - name: Pull down the source rpm and place in SRPMS (web)
      get_url:
        url: "{{ srpm_url }}"
        dest: "{{ mock_builder_rpmbuild_dir }}/SRPMS/"
      register: srpm_pull
      tags:
        - srpm_pull

    - name: Set path to the srpm
      set_fact:
        mock_srpm_path: "{{ srpm_pull.dest }}"
      when:
        - not mock_chain|bool
      tags:
        - srpm_pull

    - name: Get srpm name only
      command:
        argv:
          - "/usr/bin/rpm"
          - "-qp"
          - "{{ srpm_pull.dest }}"
          - "--qf"
          - "%{NAME}"
      changed_when: "1 != 1"
      failed_when: "srpm_build_name_ret.rc != 0"
      register: srpm_build_name_ret

    - name: Append to srpm path list
      set_fact:
        mock_srpm_path: "{{ mock_srpm_path + [ srpm_pull.dest ] }}"
      when:
        - module_mode|bool or mock_chain|bool
      tags:
        - srpm_pull

    - name: Append to srpm name list
      set_fact:
        mock_srpm_names: "{{ mock_srpm_names + [ srpm_build_name_ret.stdout ] }}"
      when:
        - mock_chain|bool
      tags:
        - srpm_pull

  rescue:
    - name: We failed, display the error.
      debug:
        msg: "Failed to srpm or set our vars: {{ ansible_failed_result }}"

    - name: Perform full cleanup
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - '{{ mock_builder_rpmbuild_dir }}'
        - '{{ mock_builder_module_dir }}'
      when:
        - enable_cleanup|bool

    - name: System is no longer in use
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - "/var/tmp/.build_in_progress"

    - name: Fail when there's an error in the block
      fail:
        msg: "Exiting entire play"

  when:
    - "source_mode == 'srpm'"
    - 'srpm_url is defined'
    - not module_mode|bool
  tags:
    - mock
    - srpm_pull
...
