---
################################################################################
# These tasks were originally in mock.yml, but they have been moved to try to
# create some form of separation and make things easier to work with and find.
# The rest of the task files will be broken out in a similar manner where
# absolutely necessary.
################################################################################
# TODO: Some module tasks should be done locally to be able to do multi-arch
#       builds. The basic idea is that if a build is being done, all applicable
#       arches should be done at the same time, if at all possible. There should
#       be a var that defines this and some other magic.
- name: Module Build Block
  block:
    # Preliminary vars have to be set before we continue
    - name: "Set preliminary vars"
      set_fact:
        mock_srpm_path: []
        mock_rpm_build_order: []
        git_commit_hash: "{{ module_git_branch }}"
        artifacts:
          rpms: []
      tags:
        - mock
        - module

    # We don't want to try to build a module that isn't for our major version
    # We try to avoid doing complex modules for now.
    - name: "Verify that the platform for the module matches"
      ansible.builtin.assert:
        that:
          - (module_data.data.dependencies[0].buildrequires.platform[0] == dist)
            or (module_data.data.dependencies[0].buildrequires.platform[0] == "{{ dist }}.{{ minor }}.0")
        fail_msg: "Platform mismatch"
        success_msg: "Platform matches"
      tags:
        - module

    # Components that do not have buildorder assigned are implicit 0. We set
    # them here first in the list.
    - name: "Assign initial list of rpms that are implicit group 0"
      set_fact:
        mock_rpm_build_group_zero: "{{ module_data.data.components.rpms.items() | selectattr('1.buildorder', 'undefined') | list }}"
      tags:
        - mock
        - module

    # Now the ones that do have buildorder set, we'll sort them properly and
    # add them in.
    - name: "Assign initial list of rpms with sorted groups"
      set_fact:
        mock_rpm_build_groups: "{{ module_data.data.components.rpms.items() | selectattr('1.buildorder', 'defined') | sort(attribute='1.buildorder') | list }}"
      tags:
        - mock
        - module

    # Combine both lists here
    - name: "Combine build order for module list"
      set_fact:
        mock_rpm_build_order: "{{ mock_rpm_build_group_zero + mock_rpm_build_groups }}"
      tags:
        - mock
        - module

    # Loop through the list and download each source RPM and build the srpm
    - name: "Loop through the RPM list for the module"
      include_tasks: wrapper/module/source_rpm.yml
      loop: "{{ mock_rpm_build_order }}"
      loop_control:
        loop_var: "mod_item"
      tags:
        - mock
        - module

    # We do the actual build here
    # TODO: Investigate what packages did NOT build and report them?
    - name: "Perform the build tasks"
      include_tasks: wrapper/mock/build.yml
      tags:
        - mock
        - module

    # Generate the module.yaml that is imported into the repodata
    - name: "Generate module documents"
      include_tasks: wrapper/module/subtasks.yml
      tags:
        - module

    # Transfer the RPMs and logs into their respective spots
    - name: "Transfer module RPMs"
      include_tasks: wrapper/transfer/module.yml
      tags:
        - mock
        - module
        - transfer

    # Create the repo and import the modular data
    - name: "Import createrepo tasks"
      include_tasks: wrapper/repo/createrepo.yml
      tags:
        - mock
        - module
        - createrepo
  when:
    - module_mode|bool
    - not module_no_components|bool
    - repo_drop_path_results is defined
  tags:
    - mock
    - module
    - createrepo

- name: Virtual Module Build Block
  block:
    # We don't want to try to build a module that isn't for our major version
    # We try to avoid doing complex modules for now.
    - name: "Verify that the platform for the module matches"
      ansible.builtin.assert:
        that:
          - (module_data.data.dependencies[0].buildrequires.platform[0] == dist)
            or (module_data.data.dependencies[0].buildrequires.platform[0] == "{{ dist }}.{{ minor }}.0")
        fail_msg: "Platform mismatch"
        success_msg: "Platform matches"
      tags:
        - module

    # Generate a yaml without doing a build. These RPM's do NOT have a release
    # tag that mention module at all. This is for the case of virtual default
    # modules, think for example perl 5.26 in EL8 where it's the default and
    # most things rely on it, but the release tag is normal "el8"
    - name: "Generate virtual module YAML"
      include_tasks: wrapper/module/virtual.yml
      tags:
        - module
  when:
    - module_mode|bool
    - module_no_components|bool
    - repo_drop_path_results is defined
  tags:
    - module
...
